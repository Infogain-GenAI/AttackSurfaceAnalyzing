// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Microsoft.CST.AttackSurfaceAnalyzer.Cli.Components.States
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.OAT.Blazor.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.OAT.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Components.States;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Collectors;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Components\States\Results.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Types;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Components\States\Results.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Objects;

#line default
#line hidden
#nullable disable
    public partial class Results : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 69 "D:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Components\States\Results.razor"
       
    string _firstRunId = string.Empty;
    string _secondRundId = string.Empty;
    string _analysesHash = string.Empty;
    string _monitorRunId = string.Empty;

    [Parameter]
    public string FirstRunId { get { return _firstRunId; } set { _firstRunId = value; OnInitialized(); } }
    [Parameter]
    public string SecondRunId { get { return _secondRundId; } set { _secondRundId = value; OnInitialized(); } }
    [Parameter]
    public string AnalysesHash { get { return _analysesHash; } set { _analysesHash = value; OnInitialized(); } }
    [Parameter]
    public string MonitorRunId { get { return _monitorRunId; } set { _monitorRunId = value; OnInitialized(); } }

    protected override void OnInitialized()
    {
        ParseOptsToResultTypes();
        UpdatePageCount();
        GetResultsPage(1);
        base.OnInitialized();
    }

    Dictionary<RESULT_TYPE, int> foundResultTypes = new Dictionary<RESULT_TYPE, int>();
    public List<CompareResult> analysisResults = new List<CompareResult>();
    int offset = 0;
    int currentPage = 1;
    int pageCount = 0;

    int _maxResults = 100;
    int MaxResults
    {
        get { return _maxResults; }
        set
        {
            _maxResults = value;
            UpdatePageCount();
            GetResultsPage(1);
        }
    }

    string _selectedResultType = "FILEMONITOR";
    string SelectedResultType
    {
        get { return _selectedResultType; }
        set
        {
            _selectedResultType = value;
            UpdatePageCount();
            GetResultsPage(1);
        }
    }

    void GetResultsPage(int selectedPage)
    {
        if (pageCount < 1) { return; }
        currentPage = selectedPage;
        offset = MaxResults * (selectedPage - 1);
        GetAnalysisResults();
        this.StateHasChanged();
    }

    void GetResultsPageByOffset(int pageOffset)
    {
        var selectedPage = currentPage + pageOffset;
        if (selectedPage < 1) { selectedPage = 1;}
        else if (selectedPage > pageCount) { selectedPage = pageCount; }
        GetResultsPage(selectedPage);
    }

    string GetPageState(int selectedPage)
    {
        return selectedPage == currentPage ? "active" : "";
    }

    public void UpdatePageCount()
    {
        var resultType = (RESULT_TYPE)Enum.Parse(typeof(RESULT_TYPE), SelectedResultType);
        var found = foundResultTypes[resultType];      
        pageCount = (int)Math.Ceiling((double)found / MaxResults);
        currentPage = 1;
    }

    public void GetAnalysisResults()
    {
        if (AttackSurfaceAnalyzerClient.DatabaseManager is null)
        {
            analysisResults = new List<CompareResult>();
            return;
        }
        var resultType = (RESULT_TYPE)Enum.Parse(typeof(RESULT_TYPE), SelectedResultType);
        switch (resultType)
        {
            case RESULT_TYPE.FILEMONITOR:
                analysisResults = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResults(string.Empty, MonitorRunId, AnalysesHash, resultType, offset, MaxResults);
                break;
            default:
                analysisResults = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResults(FirstRunId, SecondRunId, AnalysesHash, resultType, offset, MaxResults);
                break;
        }
    }

    public void ParseOptsToResultTypes()
    {
        foundResultTypes.Clear();
        if (AttackSurfaceAnalyzerClient.DatabaseManager is null)
        {
            return;
        }        
        foreach (var resultType in Enum.GetValues(typeof(RESULT_TYPE)))
        {
            var found = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResultsCount(FirstRunId, SecondRunId, AnalysesHash, (int)resultType);
            if (found == 0)
            {
                found = AttackSurfaceAnalyzerClient.DatabaseManager.GetComparisonResultsCount(string.Empty, MonitorRunId, AnalysesHash, (int)resultType);
            }
            foundResultTypes.Add((RESULT_TYPE)resultType, found);
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData { get; set; }
    }
}
#pragma warning restore 1591

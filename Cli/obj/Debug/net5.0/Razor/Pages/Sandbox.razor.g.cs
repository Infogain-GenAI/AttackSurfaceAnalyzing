#pragma checksum "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor" "{8829d00f-11b8-4213-878b-770e8597ac16}" "a0f60952ace0691d265d90bf422e7fce4a4503851c405da6ec1666fcee01ee2c"
// <auto-generated/>
#pragma warning disable 1591
namespace Microsoft.CST.AttackSurfaceAnalyzer.Cli.Pages
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Types;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Cli.Components.States;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Objects;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\_Imports.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Collectors;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using System.Reflection.Metadata;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using Microsoft.CodeAnalysis;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using System.Diagnostics;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using Tewr.Blazor.FileReader;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using Microsoft.CST.OAT.Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Cli;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using Microsoft.CST.AttackSurfaceAnalyzer.Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using Microsoft.CST.OAT.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using Microsoft.CST.OAT.Blazor.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
using Microsoft.CST.OAT.Blazor.Components.Inputs;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/sandbox")]
    public partial class Sandbox : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<h4>Sandbox</h4>\n\n");
            __builder.OpenElement(1, "div");
            __builder.AddAttribute(2, "class", "container-fluid bg-custom my-1 pb-1");
            __builder.AddMarkupContent(3, @"<ul class=""nav nav-tabs pt-2 mb-3"" id=""sandbox-tabs"" role=""tablist""><li class=""nav-item""><a class=""nav-link active"" id=""sandbox-create-tab"" data-toggle=""tab"" href=""#sandbox-create"" role=""tab"" aria-controls=""sandbox-create"" aria-selected=""true"">Create</a></li>
        <li class=""nav-item""><a class=""nav-link"" id=""sandbox-view-tab"" data-toggle=""tab"" href=""#sandbox-view"" role=""tab"" aria-controls=""sandbox-view"" aria-selected=""false"">View</a></li>
        <li class=""nav-item""><a class=""nav-link"" id=""sandbox-manage-tab"" data-toggle=""tab"" href=""#sandbox-manage"" role=""tab"" aria-controls=""sandbox-manage"" aria-selected=""false"">Manage</a></li></ul>
    ");
            __builder.OpenElement(4, "div");
            __builder.AddAttribute(5, "class", "tab-content mb-3");
            __builder.AddAttribute(6, "id", "sandbox-tabs-content");
            __builder.OpenElement(7, "div");
            __builder.AddAttribute(8, "class", "tab-pane fade show active");
            __builder.AddAttribute(9, "id", "sandbox-create");
            __builder.AddAttribute(10, "role", "tabpanel");
            __builder.AddAttribute(11, "aria-labelledby", "sandbox-create-tab");
            __builder.OpenElement(12, "div");
            __builder.AddAttribute(13, "class", "form-inline mb-3");
            __builder.AddMarkupContent(14, "<label class=\"mr-2\" for=\"typeToCreate\">Type to Create:</label>\n                ");
            __builder.OpenElement(15, "select");
            __builder.AddAttribute(16, "class", "form-control mr-2");
            __builder.AddAttribute(17, "id", "typeToCreate");
            __builder.AddAttribute(18, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 42 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                                           typeToInvoke

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(19, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => typeToInvoke = __value, typeToInvoke));
            __builder.SetUpdatesAttributeName("value");
#nullable restore
#line 43 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                     foreach (var type in Types.Keys)
                    {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(20, "option");
            __builder.AddAttribute(21, "value", 
#nullable restore
#line 45 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                        type.FullName

#line default
#line hidden
#nullable disable
            );
#nullable restore
#line 45 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
__builder.AddContent(22, type.FullName);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 46 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(23, "\n                ");
            __builder.OpenElement(24, "button");
            __builder.AddAttribute(25, "class", "btn btn-primary mr-2");
            __builder.AddAttribute(26, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 48 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                               RemoveLastObject

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(27, "disabled", 
#nullable restore
#line 48 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                                                           removeDisabled

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(28, "Remove Last Object");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(29, "\n            ");
            __builder.OpenElement(30, "div");
            __builder.AddAttribute(31, "class", "form-group");
#nullable restore
#line 51 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                 if (ParseErrors.Any())
                {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(32, "div");
            __builder.AddAttribute(33, "class", "alert alert-warning");
            __builder.AddAttribute(34, "role", "alert");
#nullable restore
#line 54 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                         foreach (var parseError in ParseErrors)
                        {
                            

#line default
#line hidden
#nullable disable
#nullable restore
#line 56 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
__builder.AddContent(35, parseError);

#line default
#line hidden
#nullable disable
#nullable restore
#line 56 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                       
                        }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 59 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 60 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                 if (@Types.Any())
                {
                    var types = Types.Where(x => x.Key.FullName == typeToInvoke);
                    if (types.Any())
                    {
                        var type = types.FirstOrDefault();

#line default
#line hidden
#nullable disable
            __builder.OpenElement(36, "button");
            __builder.AddAttribute(37, "class", "btn btn-primary mb-1");
            __builder.AddAttribute(38, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 66 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                                       AddObject

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(39, "Add ");
#nullable restore
#line 66 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
__builder.AddContent(40, type.Key.FullName);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 67 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                    }
                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 69 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                 if (ScaffoldedObject != null)
                {

#line default
#line hidden
#nullable disable
            __builder.OpenComponent<global::Microsoft.CST.OAT.Blazor.Components.Inputs.ScaffoldInput>(41);
            __builder.AddAttribute(42, "Object", (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::System.Object>(
#nullable restore
#line 71 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                           this

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(43, "SubPath", (object)("ScaffoldedObject"));
            __builder.AddAttribute(44, "Assemblies", (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::System.Collections.Generic.IEnumerable<System.Reflection.Assembly>>(
#nullable restore
#line 71 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                                                        Assemblies

#line default
#line hidden
#nullable disable
            )));
            __builder.CloseComponent();
#nullable restore
#line 72 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(45, "\n\n        \n        ");
            __builder.OpenElement(46, "div");
            __builder.AddAttribute(47, "class", "tab-pane fade");
            __builder.AddAttribute(48, "id", "sandbox-view");
            __builder.AddAttribute(49, "role", "tabpanel");
            __builder.AddAttribute(50, "aria-labelledby", "sandbox-view-tab");
            __builder.OpenElement(51, "button");
            __builder.AddAttribute(52, "class", "btn btn-primary mb-2");
            __builder.AddAttribute(53, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 78 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                           RemoveLastObject

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(54, "disabled", 
#nullable restore
#line 78 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                                                       removeDisabled

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(55, "Remove Last Object");
            __builder.CloseElement();
#nullable restore
#line 80 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
             if (SandBoxErrors.Any())
            {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(56, "div");
            __builder.AddAttribute(57, "class", "alert alert-warning");
            __builder.AddAttribute(58, "role", "alert");
#nullable restore
#line 83 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                     foreach (var error in SandBoxErrors)
                    {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(59, "p");
#nullable restore
#line 85 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
__builder.AddContent(60, error);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 86 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 88 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 90 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
             for (int i = 0; i < AppState.TestObjects.Count; i++)
            {
                var results = analyzer.Analyze(AppState.Rules, AppState.TestObjects[i]).ToList();

#line default
#line hidden
#nullable disable
            __builder.OpenElement(61, "div");
            __builder.OpenElement(62, "div");
            __builder.OpenElement(63, "span");
#nullable restore
#line 94 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
__builder.AddContent(64, results.Count);

#line default
#line hidden
#nullable disable
            __builder.AddContent(65, " rules applied");
            __builder.CloseElement();
            __builder.CloseElement();
#nullable restore
#line 96 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                     for (int j = 0; j < results.Count; j++)
                    {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(66, "div");
            __builder.OpenElement(67, "b");
#nullable restore
#line 99 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
__builder.AddContent(68, results[j].Name);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddContent(69, ": ");
#nullable restore
#line 99 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
__builder.AddContent(70, results[j].Description);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 101 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                    }

#line default
#line hidden
#nullable disable
            __builder.OpenComponent<global::Microsoft.CST.OAT.Blazor.Components.Inputs.ObjectInput>(71);
            __builder.AddAttribute(72, "id", (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::System.String>(
#nullable restore
#line 103 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                      i.ToString()

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(73, "Object", (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::System.Object>(
#nullable restore
#line 103 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                             AppState.TestObjects[i]

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(74, "Collapsable", (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::System.Boolean>(
#nullable restore
#line 103 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                                                                   true

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(75, "onChangeAction", (object)((global::System.Action)(
#nullable restore
#line 103 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                                                                                         RefreshPage

#line default
#line hidden
#nullable disable
            )));
            __builder.CloseComponent();
            __builder.CloseElement();
#nullable restore
#line 105 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
            }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(76, "\n\n        \n        ");
            __builder.OpenElement(77, "div");
            __builder.AddAttribute(78, "class", "tab-pane fade");
            __builder.AddAttribute(79, "id", "sandbox-manage");
            __builder.AddAttribute(80, "role", "tabpanel");
            __builder.AddAttribute(81, "aria-labelledby", "sandbox-manage-tab");
            __builder.AddMarkupContent(82, "<h5>State</h5>\n            ");
            __builder.AddMarkupContent(83, "<p>Load in JSON serialized Sandbox State.</p>\n            ");
            __builder.OpenComponent<global::Microsoft.CST.OAT.Blazor.Components.Inputs.FileUpload>(84);
            __builder.AddAttribute(85, "ProcessFile", (object)((global::System.Func<System.IO.Stream, System.Threading.Tasks.Task>)(
#nullable restore
#line 112 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                     LoadSandbox

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(86, "ReadLabel", (object)("Load Sandbox"));
            __builder.AddAttribute(87, "ClearAction", (object)((global::System.Action)(
#nullable restore
#line 112 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                                                        ClearSandbox

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(88, "ClearLabel", (object)("Clear Sandbox"));
            __builder.CloseComponent();
            __builder.AddMarkupContent(89, "\n            ");
            __builder.OpenElement(90, "button");
            __builder.AddAttribute(91, "class", "btn btn-primary");
            __builder.AddAttribute(92, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 113 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                                                      SaveSandboxState

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(93, "Save Sandbox State");
            __builder.CloseElement();
#nullable restore
#line 115 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
             if (SandBoxErrors.Any())
            {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(94, "div");
            __builder.AddAttribute(95, "class", "alert alert-warning");
            __builder.AddAttribute(96, "role", "alert");
#nullable restore
#line 118 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                     foreach (var error in SandBoxErrors)
                    {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(97, "p");
#nullable restore
#line 120 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
__builder.AddContent(98, error);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 121 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
                    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 123 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
            }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 128 "d:\sonarcube_projects\AttackSurfaceAnalyzer\Cli\Pages\Sandbox.razor"
       
    Func<Stream, Task> LoadSandbox;

    void ClearSandbox()
    {
        AppState.TestObjects.Clear();
        SandBoxErrors.Clear();
        ParseErrors.Clear();
        this.StateHasChanged();
    }

    void RefreshPage()
    {
        this.StateHasChanged();
    }

    Type[] TypesList = typeof(AsaRule).Assembly.DefinedTypes.Where(x => typeof(CollectObject).IsAssignableFrom(x)).ToArray();

    void SetLoadSandbox()
    {
        LoadSandbox = async assemblyStream =>
        {
            SandBoxErrors.Clear();

            try
            {
                using var sr = new StreamReader(assemblyStream);
                JObject sandboxState = JObject.Parse(await sr.ReadToEndAsync());

                if (sandboxState["Objects"] is JObject sandBoxObjects)
                {
                    foreach (var objectType in sandBoxObjects.Properties().Select(x => x.Name).ToList())
                    {
                        var types = TypesList;
                        var results = new List<(Type, ConstructorInfo)>();
                        foreach (var typed in types)
                        {
                            var constructor = typed.GetConstructor(Type.EmptyTypes);
                            if (constructor != null)
                            {
                                results.Add((typed, constructor));
                            }
                            else
                            {
                                foreach (var ctor in typed.GetConstructors())
                                {
                                    var ctorFailed = false;
                                    foreach (var param in ctor.GetParameters())
                                    {
                                        if (!Helpers.ConstructedOfLoadedTypes(param.ParameterType, Assemblies))
                                        {
                                            ctorFailed = true;
                                            break;
                                        }
                                    }
                                    if (!ctorFailed)
                                    {
                                        results.Add((typed, ctor));
                                    }
                                }
                            }
                        }
                        var selected = results.Select(x => $"{x.Item1.FullName}");
                        var resultTypes = results.Where(x => $"{x.Item1.Namespace}.{x.Item1.Name}" == objectType);
                        if (resultTypes.Any())
                        {
                            var type = resultTypes.First();
                            if (sandboxState["Objects"]?[objectType] is JArray jArray)
                            {
                                foreach (var objState in jArray)
                                {
                                    var ctor = type.Item2;
                                    var inputs = new List<object?>();
                                    foreach (var param in ctor.GetParameters())
                                    {
                                        if (param.Name is not null)
                                        {
                                            var representation = objState?[param.Name]?.ToObject<string>();
                                            if (representation != null && GetValueFromJObject(param.ParameterType, representation) is { } obj)
                                            {
                                                inputs.Add(obj);
                                            }
                                            else
                                            {
                                                inputs.Add(null);
                                            }
                                        }
                                    }
                                    var empty = ctor.Invoke(inputs.ToArray());
                                    foreach (var prop in Helpers.GetAllNestedFieldsAndPropertiesMemberInfo(type.Item1))
                                    {
                                        var obj = objState;
                                        foreach (var split in prop.Path.Split('.'))
                                        {
                                            obj = obj?[split];
                                        }
                                        var stringRepresentation = obj.ToObject<string>();
                                        if (stringRepresentation is string representation)
                                        {
                                            if (prop.MemInfo is PropertyInfo propInfo)
                                            {
                                                object? value = GetValueFromJObject(propInfo.PropertyType, representation);
                                                Helpers.SetValueByPropertyOrFieldName(empty, prop.Path, value);
                                            }
                                            if (prop.MemInfo is FieldInfo fieldInfo)
                                            {
                                                object? value = GetValueFromJObject(fieldInfo.FieldType, representation);
                                                Helpers.SetValueByPropertyOrFieldName(empty, prop.Path, value);
                                            }
                                        }
                                    }
                                    AppState.TestObjects.Add((CollectObject)empty);
                                }

                            }
                        }
                        else
                        {
                            SandBoxErrors.Add($"Type {objectType} isn't loaded and won't be loaded.");
                        }
                    }
                }
            }
            catch (OperationCanceledException)
            {
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
            }
            catch (Exception e)
            {
                var message = e.Message;
                var stackTrace = e.StackTrace;
                var type = e.GetType();
                var name = type.Name;
                type = e.GetType();
                Console.WriteLine($"{name}: {message} ({type}:{stackTrace})");
            }
            RefreshPage();
        };
    }

    List<string> ParseErrors = new List<string>();

    AsaAnalyzer analyzer = new AsaAnalyzer();

    List<string> SandBoxErrors = new List<string>();

    Dictionary<string, object> values = new Dictionary<string, object>();

    int constructorToInvoke
    {
        get
        {
            return _constructorToInvoke;
        }
        set
        {
            _constructorToInvoke = value;
            var constructors = Types.Where(x => x.Key.FullName == typeToInvoke).FirstOrDefault().Value;
            if (constructors.Any())
            {
                ScaffoldedObject = new Scaffold(constructors[value]);
                if (constructors[value].DeclaringType == typeof(CertificateObject))
                {
                    ScaffoldedObject.Parameters["Certificate"] = (new Scaffold(typeof(SerializableCertificate).GetConstructors().Where(x => x.GetParameters().Count() > 1).First()), typeof(SerializableCertificate));
                }
            }
            RefreshState();
        }
    }

    string typeToInvoke
    {
        get
        {
            return _typeToInvoke;
        }
        set
        {
            _typeToInvoke = value;
            var constructors = Types.Where(x => x.Key.FullName == value).FirstOrDefault().Value;
            if (constructors.Any())
            {
                var constructorToUse = constructors[constructorToInvoke];
                ScaffoldedObject = new Scaffold(constructorToUse, Assemblies);
                if (constructors[constructorToInvoke].DeclaringType == typeof(CertificateObject))
                {
                    ScaffoldedObject.Parameters["Certificate"] = (new Scaffold(typeof(SerializableCertificate).GetConstructors().Where(x => x.GetParameters().Count() > 1).First()), typeof(SerializableCertificate));
                }
            }
            RefreshState();
        }
    }

    string _typeToInvoke = string.Empty;

    public bool removeDisabled => AppState.TestObjects.Count == 0;
    public Scaffold ScaffoldedObject;

    int _constructorToInvoke;

    Dictionary<Type, List<ConstructorInfo>> Types { get; set; } = new Dictionary<Type, List<ConstructorInfo>>();

    List<Assembly> Assemblies { get; set; } = new List<Assembly>();

    protected override async Task OnInitializedAsync()
    {
        UpdateTypes();
        SetLoadSandbox();
        var results = analyzer.Analyze(AppState.Rules);
        await base.OnInitializedAsync();
    }

    void UpdateTypes()
    {
        Assemblies.Add(Assembly.Load("AsaLib"));
        Assemblies.Add(Assembly.Load("Microsoft.Win32.Registry"));

        var types = TypesList;
        var results = new Dictionary<Type, List<ConstructorInfo>>();
        foreach (var type in types)
        {
            try
            {
                var allowedConstructors = new List<ConstructorInfo>();
                var constructors = type.GetConstructors(BindingFlags.Instance | BindingFlags.Public);
                foreach (var constructorItr in constructors)
                {
                    if (Helpers.ConstructedOfLoadedTypes(constructorItr, Assemblies))
                    {
                        allowedConstructors.Add(constructorItr);
                    }
                }
                if (allowedConstructors.Any())
                {
                    results.Add(type, allowedConstructors);
                }
            }
            catch (Exception)
            {
                // Skip this constructor, we can't make it work.
                //Console.WriteLine($"Failed to get constructor:{e.Message}");
            }
        }
        Types = results;
        RefreshState();
    }

    void RefreshState()
    {
        this.StateHasChanged();
    }

    void RemoveLastObject()
    {
        if (AppState.TestObjects.Count > 0)
        {
            AppState.TestObjects.RemoveAt(AppState.TestObjects.Count - 1);
        }
    }

    Dictionary<string, object> Parameters = new Dictionary<string, object>();

    void AddObject()
    {
        try
        {
            if (ScaffoldedObject.Construct() is CollectObject colObj)
            {
                if (colObj is ComObject comObject)
                {
                    comObject.x86_Binary = new FileSystemObject(string.Empty);
                    comObject.x64_Binary = new FileSystemObject(string.Empty);
                }
                AppState.TestObjects.Add(colObj);
            }
        }
        catch (Exception e)
        {
            ParseErrors.Add($"Failed to construct object.  This likely is due to an external assembly reference.  This PWA currently only supports types which are fully defined within the provided assembly. ({e.Message})");
        }
    }

    object? GetValueFromJObject(Type type, string objectState)
    {
        if (type == typeof(int))
        {
            if (int.TryParse(objectState, out int intVal))
            {
                return intVal;
            }
        }
        else if (type == typeof(string))
        {
            return objectState;
        }
        else if (type == typeof(char))
        {
            return objectState[0];
        }
        else if (type == typeof(long))
        {
            if (long.TryParse(objectState, out long longVal))
            {
                return longVal;
            }
        }
        else if (type == typeof(float))
        {
            if (float.TryParse(objectState, out float floatVal))
            {
                return floatVal;
            }
        }
        else if (type == typeof(double))
        {
            if (double.TryParse(objectState, out double doubleVal))
            {
                return doubleVal;
            }
        }
        else if (type == typeof(decimal))
        {
            if (decimal.TryParse(objectState, out decimal decimalVal))
            {
                return decimalVal;
            }
        }
        else if (type == typeof(bool))
        {
            if (bool.TryParse(objectState, out bool boolVal))
            {
                return boolVal;
            }
        }
        else if (type == typeof(uint))
        {
            if (uint.TryParse(objectState, out uint uintVal))
            {
                return uintVal;
            }
        }
        else if (type == typeof(ulong))
        {
            if (ulong.TryParse(objectState, out ulong ulongVal))
            {
                return ulongVal;
            }
        }
        else if (type == typeof(short))
        {
            if (short.TryParse(objectState, out short shortVal))
            {
                return shortVal;
            }
        }
        else if (type == typeof(ushort))
        {
            if (ushort.TryParse(objectState, out ushort ushortVal))
            {
                return ushortVal;
            }
        }
        else if (type == typeof(DateTime))
        {
            if (DateTime.TryParse(objectState, out DateTime dateTimeVal))
            {
                return dateTimeVal;
            }
        }
        else if (type.IsEnum)
        {
            if (Enum.TryParse(type, objectState, out object? result))
            {
                return Convert.ChangeType(result, type);
            }
        }
        return null;
    }

    public async Task SaveSandboxState()
    {
        var objects = new Dictionary<string, List<object>>();
        foreach (var obj in AppState.TestObjects)
        {
            var t = obj.GetType();
            if (t.FullName is not null)
            {
                if (!objects.ContainsKey(t.FullName))
                {
                    objects.Add(t.FullName, new List<object>());
                }
                objects[t.FullName].Add(obj);
            }
        }
        var state = new Cli.SandboxState(objects);
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            "SandboxState.json",
            "data:text/plain;charset=utf-8,",
            Newtonsoft.Json.JsonConvert.SerializeObject(state)
        );
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileReaderService fileReaderService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppData AppState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData { get; set; }
    }
}
#pragma warning restore 1591

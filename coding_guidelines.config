1. Naming Convention
a. Classes and Interfaces: PascalCase (CustomerService, IDataService) 
b. Methods: PascalCase (GetCustomerDetails, CalculateTotal) 
c. Filename should match the class that it contains
d. Purpose of class should be clear through its name. Use MyClassWithMyPurpose instead of MyClass.
e. Constants in UPPER_CASE (MAX_RETRY_COUNT, DEFAULT_TIMEOUT) 
f. Private Fields: CamelCase (_logger, _dbContext) 
g. Interfaces: Prefix with I (IRepository, IUserService)
h. Enum names should be singular.
i .Do not include redundant information that is already supplied by the class context. Example: In ProfitEntity class, do not make a property named EntityName. Simply use Name.
2. Documentation and Comments
a. Comments: Use XML comments for public methods, and concise inline comments for complex code logic. 
b. No commented code should be as part of the PR.
3. Code Formatting
a. Code Formatting: Maintain consistent code formatting throughout the codebase. Use proper indentation, spacing, and line breaks to improve readability. For example, ensure that each method and class is properly indented and that there is consistent spacing between code blocks. Remove any ununsed references of import statements in the code.
4. Design Principles
a. Methods: Each method should perform a single responsibility (SRP - Single Responsibility Principle). Keep methods small. 
b. Classes: Follow SOLID principles to ensure code extensibility and maintainability. 
5. Constant and Enum
a. No extra spaces after characters - exclamation mark, fullstop and commas etc. in a string literal.
b. Usage of any hardcoded numbers is not allowed. In case you want to use a number for any value either use it in enum, configuration, variable name and then use that variable to validate the value. 
c. Avoid multiple enumerations of IEnumerable collections.
d. Do not use Enum.Option.ToString() when stringifying an enum option. Instead, use the nameof() expression.
6. DateTime Object
a. Use DateTimeOffset for any object that uses a date and a time as one property.
b. Use DateTime for any object that uses a timeless date.
7. Depdendencies
a. Access Specifiers need to be private or internal unless those classes are methods are being accessed outside the project.
b. Project references should be to interface libraries instead of concrete libraries (stairway pattern).
c. All dependent data should be passed in as explicit parameters rather than pulled out of hidden  variables. Example:  Do not pull values out of SessionManager.GetState(). Pull the session data out in the application layer and pass in the values you need. Example: Do not pull values out of a dynamic object or dictionary if those values are actually required by the method. Instead request the required values directly.
8. Exception Handling
a. Error Handling: Use try-catch blocks effectively, and log all exceptions with Sageworks standards. 
b. Exceptions to be thrown from the API with full stack trace
c. If multiple if and else blocks and have same message  use a single variable to define the error message and reuse the variable
9. API Contract
a. Return types for endpoints should be type being returned (i.e. don’t return IHttpActionResult when you’re really just returning a DTO). Use HttpResponseException with a matching http code to return specific errors.
10. Other Guidelines
a. Interface methods should be simple and ask for the minimum number of parameters- The Underwear Rule
b. Repository methods should return IQueryable for enumerable return types.
c. Don't have unread private fields.

A.	Naming Conventions:
	1.	Classes and Interfaces: PascalCase (CustomerService, IDataService) 
	2.	Methods: PascalCase (GetCustomerDetails, CalculateTotal) 
	3.	Filename should match the class that it contains
	4.	Purpose of class should be clear through its name. Use MyClassWithMyPurpose instead of MyClass.
	5.	Constants: UPPER_CASE (MAX_RETRY_COUNT, DEFAULT_TIMEOUT) 
	6.	Private Fields: _camelCase (_logger, _dbContext) 
	7.	Interfaces: Prefix with "I" (IRepository, IUserService)
	8.	Enum names should be singular.
	9.	If a default value exists, assign default to 0, If there is no default value, do not include a 0 value
	10.	Do not include redundant information that is already supplied by the class context
		i. In ProfitEntity class, do not make a property named EntityName. Simply use Name.
B.	Coding Standards
	1.	No extra spaces after !,.commas etc. in a string literal.
C.	Exception Handling
	1.	Exceptions to be thrown from the API with full stack trace
	2.	Any variable which has excpetion or error message needs to be name error Message
	3.	If multiple if and else blocks and have same message  use a single variable to define the error message and reuse the variable
D.	Coding Guidelines
	1.	Methods: Each method should perform a single responsibility (SRP - Single Responsibility Principle). Keep methods small. 
	2.	Classes: Follow SOLID principles to ensure code extensibility and maintainability. 
	3.	Error Handling: Use try-catch blocks effectively, and log all exceptions with Sageworks standards. 
	4.	Comments: Use XML comments for public methods, and concise inline comments for complex code logic.`. 
	5.	Code Formatting: Maintain consistent code formatting throughout the codebase. Use proper indentation, spacing, and line breaks to improve readability. For example, ensure that each method and class is properly indented and that there is consistent spacing between code blocks. Remove any ununsed references/ import statements in the code.
	6.	Access Specifiers need to be private or internal unless those classes are methods are being accessed outside the project
	7.	Unit Testing- every method should have at least 2 testcases for every method.
	8.	We should save the value  in a variable instead of calling the method twice with the same parameters
	9.	No commented code should be as part of the PR
	10.	Usage of any hardcoded numbers is not allowed. In case you want to use a number for any value either use it in enum, configuration, variable name and then use that variable to validate the value. For example, 
		Incorrect code:
		if (FileType ==1 ){}
		else{FileType ==2}
		Correct code:
		int CSVFileType = 1
		int PDFFileType = 2
		if(FileType == CSVFileType){}
		else if PDFFileType == PDFFileType{}

	11.	Project references should be to interface libraries instead of concrete libraries (stairway pattern).
	12.	Use Abrigo's custom Euid data type for all ID properties and variables that reference ID values.
	13.	Use DateTimeOffset for any object that uses a date and a time as one property
	14.	Use DateTime for any object that uses a timeless date.
	15.	Repository methods should return IQueryable for enumerable return types.
	16.	Avoid multiple enumerations of IEnumerable collections
	17.	Interface methods should be simple and ask for the minimum number of parameters. "The Underwear Rule"
	18.	All dependent data should be passed in as explicit parameters rather than pulled out of hidden  variables. For example:
		i.	Do not pull values out of SessionManager.GetState(). Pull the session data out in the application layer and pass in the values you need.
		ii.	Do not pull values out of a dynamic object or dictionary if those values are actually required by the method. Instead request the required values directly.
	19.	All user input should be sanitized using SagWorksLib.Helpers.HtmlSanitizer.
	20.	Validate everything that comes from the client, even if it isn't user input
	21.	Codebehind files on pages that access customer data should extend SageWorksLib.Application.SessionPage
	22.	Do not use static variables in code behinds.
	23.	Top-level methods (Page_Load) should call HandleException().
	24.	Do not use Enum.Option.ToString() when stringifying an enum option. Instead, use the nameof() expression.
	25.	Don't have unread private fields
	26.	Return types for endpoints should be type being returned (i.e. don’t return IHttpActionResult when you’re really just returning a DTO). Use
	HttpResponseException with a matching http code to return specific errors.
